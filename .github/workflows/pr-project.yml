name: "Project (Pull-Request)"

on:
  workflow_run:
    workflows: ["Pull-Request Update"]
    types: [completed]

jobs:
  needs-attention:
    # Brings the pull-request to attention by any activities triggered by users other than assignees.
    # c.f. https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
    if: github.repository_owner == 'cupy'
    runs-on: ubuntu-22.04
    steps:
      # Get the GitHub app installation token.
      # https://github.com/apps/cupy-project-automation
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm install @octokit/app
      - name: Generate Token
        uses: actions/github-script@v6
        id: token
        env:
          GH_APP_ID: 349488
          GH_APP_PRIVATE_KEY: ${{ secrets.GH_APP_PROJECT_AUTOMATION_PEM }}
        with:
          script: |
            const { App } = require("@octokit/app");
            const app = new App({
              appId: process.env.GH_APP_ID,
              privateKey: process.env.GH_APP_PRIVATE_KEY,
            });
            const id = (await app.octokit.request("GET /orgs/${{ github.repository_owner }}/installation")).data.id;
            const token = (await app.octokit.request(`POST /app/installations/${id}/access_tokens`)).data.token;
            core.setSecret(token);
            return token;
          result-encoding: string

      # Get the pull-request number.
      - name: Download artifact
        uses: actions/github-script@v6
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "PULL_REQUEST_NUMBER"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/PULL_REQUEST_NUMBER.zip', Buffer.from(download.data));
      - run: unzip PULL_REQUEST_NUMBER.zip

      - name: Update Status
        shell: /usr/bin/bash -uex "{0}"
        env:
          GH_TOKEN: ${{ steps.token.outputs.result }}
        run: |
          PULL_REQUEST="$(cat 'PULL_REQUEST_NUMBER')"

          # https://github.com/orgs/cupy/projects/4
          gh api graphql -F "pull_request=${PULL_REQUEST}" -f query='
            query ($pull_request: Int!) {
              organization(login: "cupy") {
                projectV2(number: 4) {
                  id
                  field(name: "Status") {
                    ... on ProjectV2SingleSelectField {
                      id
                      options {
                        id
                        name
                      }
                    }
                  }
                }
                repository(name: "cupy") {
                  pullRequest(number: $pull_request) {
                    projectItems(first: 100, includeArchived: false) {
                      nodes {
                        project {
                          id
                        }
                        id
                      }
                    }
                  }
                }
              }
            }
          ' --jq '
            .data.organization.projectV2.id as $project_id |
            {
              "project_id": $project_id,
              "field_id":   .data.organization.projectV2.field.id,
              "option_id":  .data.organization.projectV2.field.options[] | select(.name == "Needs Attention") | .id,
              "item_id":    .data.organization.repository.pullRequest.projectItems.nodes[] | select(.project.id == $project_id) | .id,
            }
          ' > params.json
          jq . params.json
          gh api graphql $(jq -r '[to_entries[] | "-F " + .key + "=\"" + .value + "\""] | join(" ")' params.json) -f query='
            mutation ($project_id: ID!, $field_id: ID!, $item_id: ID!) {
              updateProjectV2ItemFieldValue(
                input: {projectId: $project_id, fieldId: $field_id, itemId: $item_id, value: {singleSelectOptionId: "98236657"}}
              ) {
                clientMutationId
              }
            }
          '

      - name: Revoke Token
        uses: actions/github-script@v6
        if: always() && steps.token.outcome == 'success'
        with:
          github-token: ${{ steps.token.outputs.result }}
          script: |
            await github.rest.apps.revokeInstallationAccessToken();
